package com.aws.saasfactory.multitenancy;

import java.sql.Connection;
import java.sql.Statement;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import org.hibernate.engine.spi.SessionImplementor;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MultiTenancyApplication {

	private static SessionFactory sessionFactory;

	public static void main(String[] args) {

		final Configuration configuration = new Configuration();
		configuration.addAnnotatedClass( Project.class );
		sessionFactory = configuration.buildSessionFactory(
				new StandardServiceRegistryBuilder().build() );

		createTable( SimpleMultiTenantConnectionProvider.TENANT_ID_1 );
		createTable( SimpleMultiTenantConnectionProvider.TENANT_ID_2 );

		insertProject( SimpleMultiTenantConnectionProvider.TENANT_ID_1 );
		insertProject( SimpleMultiTenantConnectionProvider.TENANT_ID_2 );

		printProjects( SimpleMultiTenantConnectionProvider.TENANT_ID_1 );
		printProjects( SimpleMultiTenantConnectionProvider.TENANT_ID_2 );

		System.exit(0);


//		SpringApplication.run(MultiTenancyApplication.class, args);
	}

	private static void createTable(String tenantId) {
		// Multi-tenancy does not currently support schema export, so manually create it here.
		try {
			final Session s = openSession( tenantId );
			final SessionImplementor sImpl = (SessionImplementor) s;
			final Connection conn = sImpl.connection();
			final Statement stmt = conn.createStatement();
			stmt.executeUpdate( "CREATE TABLE Project (id bigint generated by default as identity, name varchar(255), primary key (id))" );
			stmt.close();
			s.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void insertProject(String tenantId) {
		final Session s = openSession( tenantId );
		s.getTransaction().begin();
		final Project project = new Project();
		project.setName( "project_" + tenantId );
		s.persist(project);
		s.getTransaction().commit();
		s.close();
	}

	private static void printProjects(String tenantId) {
		final Session s = openSession( tenantId );
		s.getTransaction().begin();
		final Project project = (Project) s.createQuery( "FROM Project" ).uniqueResult();
		System.out.println(project.toString());
		s.getTransaction().commit();
		s.close();
	}

	private static Session openSession(String tenantId) {
		return sessionFactory.withOptions()
				.tenantIdentifier( tenantId ).openSession();
	}

}

